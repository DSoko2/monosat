Licensing:
MonoSAT is based on MiniSat, version 2.2. Many thanks to the authors of MiniSat! 
The majority of MonoSAT is released under the MIT license (as documented in individual source files).
However, some of the code, including some important libraries, fall under the GPL, and as a result, 
MonoSAT as a whole is currently released under the GPL (version 3.0 or later).


Build with 

$cd Release
$make

Tested on Ubuntu 14.04, with G++ 4.8.2 (MonoSAT makes use of C++11 features, and so requires a compatible compiler)

Usage:

$./monosat [-witness][-witness-file=filename] <gnf_file>

Enable the -witness option to printout the solution to the variables in the CNF, or use -witness-file to write the witness to a file. 
MonoSat comes with a (very!) large number of options to control its performance, the majority of which are experimental and or broken.
I'd recommend not experimenting with them for now.


File Format Notes:

MonoSAT reads files in a extended version DIMACS CNF format, provisionally called "GNF" format. 
The additions provide support for graph and geometric theory predicates 
(note though that this format may be somewhat awkward to use, and is still subject to frequent changes).

A GNF file is a DIMACS CNF followed by one or more graph declarations, and for each graph, a set of edge declarations 
for that graph, and optionally a set of graph predicates constraining the edges on that graph:

p cnf <vars> <clauses>
digraph <nodes> <edges> <graphID>
edge <graphID> <from> <to> <CNF variable>
reach <graphID> <from> <to> <CNF variable>

An example GNF (avaialble in examples/)

c this is a cnf with 5 Boolean variables and 2 clauses
p cnf 7 5
c some clauses in CNF format
1 0
3 0
-2 -4 0
6 7 0
-6 0
c add a directed graph with identifier '0'. This graph has 3 nodes (numbered 0..2) and 4 edges.
c All graph identifiers must be unique non-negative integers.
digraph 4 5 0
c declare an edge in graph 0, from node 0 to node 2. This edge is enabled (e.g., in the graph) if and only if variable 1 is true.
c note that the variable controlling the graph must not be negative, and also that (for now), no two edges or graph predicates 
c can be associated with the same variable. 
edge 0 0 2 1
edge 0 2 0 2
edge 0 2 1 3
edge 0 2 3 4
edge 0 3 2 5
c add a reachability constraint to graph 0. Variable 7 must be assigned true if and only if node 0 reaches node 1 in graph 0 
c (under assignment to the edge variables).
reach 0 0 3 6
c add a second reachability constraint to graph 0. Variable 8 must be true if and only if node 3 reaches node 0 in graph 0.
reach 0 3 0 7


Important notes about GNF format:
1) It is provisional. It is in flux, and may end up being entirely deprecated.
2) At the moment, each edge, and each graph predicate (eg, reach, distance_lt,max_flow_gt) must be associated with exactly one (positive) variable in the CNF, and that variable must not be associated with any other edges or graph predicates (even for other graphs).